CHANGE PASSWORD IN CONNECTOR CALLS TO PASSWORD SET ON YOUR mySQL SERVER.
        EX: mydb = mysql.connector.connect(
                host = "localhost",
                user = "root",
                password = "YOUR_PASSWORD", # Change accordingly
                database = "NoPorkKitchenDB"
            )

To use the database, run createDB.py and createTables.py first.
To use functions from createTables add the following to header --> import updateTables
First call          updateTables.init()
Call function       updateTables.func_name(args)
When done call      updateTables.close()

############################################################################################
#---------------------------------------USERS-----------------------------------------------
############################################################################################
def getAllUsers()
def getAllPendingUsers()
def getAllFlaggedUsers()
def setFlagforID(userid,value)                          --- set flag value of 0 or 1
def checkCredentials(username,password)                 --- returns True or False
def createUser(id,username,name,password,usertype)      --- returns True or False
def updateUserType(userid,status)                       --- Update Status(pending,approved,banned,etc.) and add user to respective tables
#---------------------------------------Manager---------------------------------------------
def getAllManagers()
def updateManagerSalary(userid,newsalary)               --- returns True or False
def getManagerSalary(userid)                            --- returns salary in [(tuple)]
def updateManagerHours(userid,hours)                    --- returns True or False
def getManagerHours(userid)                             --- returns hours in [(tuple)]
#---------------------------------------Chefs-----------------------------------------------
def getAllChefs()
def updateChefSalary(userid,newsalary)                  --- returns True or False
def getChefSalary(userid)                               --- returns salary in [(tuple)]
def updateChefHours(userid,hours)                       --- returns True or False
def getChefHours(userid)                                --- returns hours in [(tuple)]
#---------------------------------------Delivery-----------------------------------------------
def getAllDelivery()
def updateNumDeliveries(userid,numDelivered)            --- returns True or False; adds numDelivered to column
def getNumDeliveries(userid)                            --- returns num_deliveries in (tuple)
def updateDistance(userid,distance)                     --- returns True or False; adds distance to column
def getDistance(userid)                                 --- return distance in (tuple)
def updateDeliveryEarnings(userid,amount)               --- returns True or False; adds amount to column
def getDeliveryEarnings(userid)                         --- return delivery earnings in (tuple)
#---------------------------------------Customers-----------------------------------------------
def getAllCustomers()
def updateBalance(userid,changeinbalance,trans_type)    --- returns True or False; column updated according to transaction
def getBalance(userid)                                  --- returns balance in [(tuple)]
def changeAddress(userid,address)                       --- returns True or False
def getAddress(userid)                                  --- returns balance in (tuple)
def changeVIP(userid,vip)                               --- returns True or False; VIP = 0 or 1


#############################################################################################
#-----------------------------------------Menu-----------------------------------------------
#############################################################################################
def getAllItems()
def getAllOfType(type)                                  --- i.e. get all 'beverages','breakfast',etc.
def getItem(itemID)
def addItem(id,price,name,description,type,chef,image)  --- returns True or False
def updateItemDescription(id, description)              
def updateItemImage(id, image)
def updateRating(id,new_rating)                         --- Takes new rating from review, updates average rating 
def deleteItem(id)


#############################################################################################
#-----------------------------------------ORDERS---------------------------------------------
#############################################################################################
def getAllOrders()
def getAllIncompleteOrders()                                        --- get all orders where status != 'done'
def getAllOrdersForCust(id)                                         --- get all orders for customerID
def getAllOrdersForDelivery(id)                                     --- get all orders for deliveryID
def getItemsFromOrder(orderid)                                      --- get all items for order number from OrderItems
def createOrder(orderid,customerid,items)                           --- adds new order; items formatted: [(item_no,quantity),...]; returns True or False; price calculated
def addItemToOrder(order_no,item)                                   --- used by createOrder to populate OrderItems table; item formatted: (item_no,quantity)
def deleteOrder(orderID)
def assignDelivery(orderID,deliveryID)
def updateOrderStatus(orderID,status)
def addDeliveryReview(orderID,delivery_rating,delivery_review)
def addItemsReview(orderID,item_reviews)                            --- add item reviews to OrderItems; item_reviews formatted [(item_no,rating,review),...]


#############################################################################################
#-----------------------------------------System---------------------------------------------
#############################################################################################
                This table stores all compliments/complaints filed.
def getAllCompl()
def getAllPendingCompl()
def getAllComplbyUser(userid)                                       --- all compliments/complaints filed by user
def getAllComplAgainstUser(userid)                                  --- all compliments/complaints against user
def addCompl(entry_no,defendantID,reviewerID,reviewType,critique)   --- returns True or False
def updateCompl(entry_no,verdict,status)                            --- status = 0,1,2 where 0 is pending, 1 is accepted, 2 is dismissed
                                                                    --- if the status is accepted, then the merit of the user is updated 
#-----------------------------------------Merit---------------------------------------------
def getAllMerit()
def getMeritForID(userID)
def updateMerit(userID,value)                                       --- Value is -1 or 1 from complType, updates the merit accordingly
                                                                    --- If the merit <= -3 then the user is flagged


#############################################################################################
#---------------------------------------Discussion-------------------------------------------
#############################################################################################
def createPost(userid,title,body)                                   --- returns True or False
def addReply(userid,post_no,reply)                                  --- returns True or False; reply concatenated to text field in format:
                                                                    --- "<^>USER_ID//Reply_Text<^><^>USER_ID//Reply_Text<^>...."
def getPosts()
def getReplies(post_no)                                             --- returns text field replies, needs to be processed for individual replies
def deletePost(post_no)